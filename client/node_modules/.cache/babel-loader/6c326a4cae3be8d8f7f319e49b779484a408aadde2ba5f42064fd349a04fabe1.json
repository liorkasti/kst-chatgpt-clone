{"ast":null,"code":"var _jsxFileName = \"/Users/liorkastenbaum/Workspace/NodeJS/kst-chatgpt-clone/client/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultMessage = {\n  title: \"\",\n  role: \"user\",\n  content: \"\"\n};\nconst App = () => {\n  _s();\n  const [currentTitle, setCurrentTitle] = useState(\"\");\n  const [previousChats, setPreviousChats] = useState([]);\n  const [messageContent, setMessageContent] = useState(\"\");\n  const [message, setMessage] = useState(defaultMessage);\n  const sendMessage = async () => {\n    // const options = {\n    //   method: \"POST\",\n    //   body: JSON.stringify({\n    //     message: messageContent,\n    //   }),\n    //   headers: {\n    //     \"Content-Type\": \"application/json\",\n    //   },\n    // };\n\n    // try {\n    //   const response = await fetch(\"http://localhost:8000/api/chat\", options);\n    //   const data = await response.json();\n    //   console.log(\"data :>> \", data);\n    //   setMessage(data.choices[0].message);\n    setMessage({\n      title: message.title,\n      role: \"assistant\",\n      content: \" \" + messageContent + \" ChatGPT is a free-to-use AI system. Use it for engaging conversations, gain insights, automate tasks, and witness the future of AI, all in one place.\"\n    });\n    // } catch (error) {\n    //   console.log(\"Error in sendMessage: \", error);\n    // }\n  };\n  useEffect(() => {\n    // initiating a new chat\n    if (!currentTitle && messageContent && message) {\n      setCurrentTitle(messageContent);\n    }\n\n    // initiating an existing chat\n    if (currentTitle && messageContent && message) {\n      setPreviousChats(prev => [...prev, {\n        title: currentTitle,\n        role: \"user\",\n        message: messageContent\n      }, {\n        title: currentTitle,\n        role: message.role,\n        content: message.content\n      }]);\n    }\n  }, [message, currentTitle]);\n  const createNewChat = () => {\n    setMessage(defaultMessage);\n    setMessageContent(\"\");\n    setCurrentTitle(\"\");\n  };\n  const selectExistingChat = title => {\n    setCurrentTitle(title);\n    setMessage(defaultMessage);\n    setMessageContent(\"\");\n  };\n  const currentChat = previousChats.filter(previousChat => previousChat.title === currentTitle);\n  const uniqueTitles = Array.from(new Set(previousChats.map(previousChat => previousChat.title)));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"side-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createNewChat,\n        children: \"+ New chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"history\",\n        children: uniqueTitles === null || uniqueTitles === void 0 ? void 0 : uniqueTitles.map((uniqueTitle, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => selectExistingChat(uniqueTitle),\n          children: uniqueTitle\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"powered-by\",\n          children: \"Github @LiorKasti\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"main\",\n      children: [!currentTitle && /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"KST-GPT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 27\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"feed\",\n        children: [currentChat === null || currentChat === void 0 ? void 0 : currentChat.map((chatMessage, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: chatMessage.role\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: chatMessage.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bottom-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              value: messageContent,\n              onChange: e => setMessageContent(e.target.value)\n              // onSubmit={(e) => {\n              //   setMessageContent(messageContent);\n              //   sendMessage();\n              // }}\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"submit\",\n              onClick: sendMessage,\n              children: \"\\u27A2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"info\",\n            children: \"ChatGPT is a free-to-use AI system. Use it for engaging conversations, gain insights, automate tasks, and witness the future of AI, all in one place.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"25hzaUEZ60VmT0r8VedME109QBQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","defaultMessage","title","role","content","App","_s","currentTitle","setCurrentTitle","previousChats","setPreviousChats","messageContent","setMessageContent","message","setMessage","sendMessage","prev","createNewChat","selectExistingChat","currentChat","filter","previousChat","uniqueTitles","Array","from","Set","map","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","uniqueTitle","index","chatMessage","value","onChange","e","target","id","_c","$RefreshReg$"],"sources":["/Users/liorkastenbaum/Workspace/NodeJS/kst-chatgpt-clone/client/src/App.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nexport interface Message {\n  title: string;\n  role: \"user\" | \"assistant\";\n  content: string;\n}\nconst defaultMessage: Message = {\n  title: \"\",\n  role: \"user\",\n  content: \"\",\n};\n\nconst App = () => {\n  const [currentTitle, setCurrentTitle] = useState(\"\");\n  const [previousChats, setPreviousChats] = useState<Message[]>([]);\n  const [messageContent, setMessageContent] = useState(\"\");\n  const [message, setMessage] = useState<Message>(defaultMessage);\n\n  const sendMessage = async () => {\n    // const options = {\n    //   method: \"POST\",\n    //   body: JSON.stringify({\n    //     message: messageContent,\n    //   }),\n    //   headers: {\n    //     \"Content-Type\": \"application/json\",\n    //   },\n    // };\n\n    // try {\n    //   const response = await fetch(\"http://localhost:8000/api/chat\", options);\n    //   const data = await response.json();\n    //   console.log(\"data :>> \", data);\n    //   setMessage(data.choices[0].message);\n    setMessage({\n      title: message.title,\n      role: \"assistant\",\n      content:\n        \" \" +\n        messageContent +\n        \" ChatGPT is a free-to-use AI system. Use it for engaging conversations, gain insights, automate tasks, and witness the future of AI, all in one place.\",\n    });\n    // } catch (error) {\n    //   console.log(\"Error in sendMessage: \", error);\n    // }\n  };\n\n  useEffect(() => {\n    // initiating a new chat\n    if (!currentTitle && messageContent && message) {\n      setCurrentTitle(messageContent);\n    }\n\n    // initiating an existing chat\n    if (currentTitle && messageContent && message) {\n      setPreviousChats(\n        (prev) =>\n          [\n            ...prev,\n            {\n              title: currentTitle,\n              role: \"user\",\n              message: messageContent,\n            },\n            {\n              title: currentTitle,\n              role: message.role,\n              content: message.content,\n            },\n          ] as Message[]\n      );\n    }\n  }, [message, currentTitle]);\n\n  const createNewChat = () => {\n    setMessage(defaultMessage);\n    setMessageContent(\"\");\n    setCurrentTitle(\"\");\n  };\n\n  const selectExistingChat = (title: string) => {\n    setCurrentTitle(title);\n    setMessage(defaultMessage);\n    setMessageContent(\"\");\n  };\n\n  const currentChat = previousChats.filter(\n    (previousChat) => previousChat.title === currentTitle\n  );\n\n  const uniqueTitles = Array.from(\n    new Set(previousChats.map((previousChat) => previousChat.title))\n  );\n\n  return (\n    <div className='app'>\n      <section className='side-bar'>\n        <button onClick={createNewChat}>+ New chat</button>\n        <ul className='history'>\n          {uniqueTitles?.map((uniqueTitle, index) => (\n            <li key={index} onClick={() => selectExistingChat(uniqueTitle)}>\n              {uniqueTitle}\n            </li>\n          ))}\n        </ul>\n        <nav>\n          <p className='powered-by'>Github @LiorKasti</p>\n        </nav>\n      </section>\n      <section className='main'>\n        {!currentTitle && <h1>KST-GPT</h1>}\n        <ul className='feed'>\n          {currentChat?.map((chatMessage, index) => (\n            <li key={index}>\n              <p>{chatMessage.role}</p>\n              <p>{chatMessage.content}</p>\n            </li>\n          ))}\n          <div className='bottom-section'>\n            <div className='input-container'>\n              <input\n                value={messageContent}\n                onChange={(e) => setMessageContent(e.target.value)}\n                // onSubmit={(e) => {\n                //   setMessageContent(messageContent);\n                //   sendMessage();\n                // }}\n              />\n              <div id='submit' onClick={sendMessage}>\n                ➢\n              </div>\n            </div>\n            <p className='info'>\n              ChatGPT is a free-to-use AI system. Use it for engaging\n              conversations, gain insights, automate tasks, and witness the\n              future of AI, all in one place.\n            </p>\n          </div>\n        </ul>\n      </section>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}